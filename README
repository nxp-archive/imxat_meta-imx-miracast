NXP Linux Miracast/WFD Sink Stack
==============

Getting Started
--------------
These instructions will get you a copy of the project up and running on your local machine for development and testing purposes.

Prerequisites
--------------
This Miracast meta-layer should be applied on top of the NXP fsl-yocto-L4.1.15_2.0.0-ga release
See corresponding i.MX_Yocto_Project_User's_Guide.pdf for Yocto Project Installation

Miracast WFD Sink Stack Building & Installing
--------------

Step 1:
- Update Yocto Project per the instructions from the Yocto Project User's Guide and run the setup script.
The Miracast demo image is making use of Qt for the UI, that can be run on a framebuffer (FB) or wayland/weston graphic environment

In case you build the Miracast demo for an i.MX6q SabreSD Platform using a FB distro:
    $ DISTRO=fsl-imx-fb MACHINE=imx6qsabresd source fsl-setup-release.sh -b <Your_Build_Directory>

In case you build the Miracast demo for an i.MX6q SabreAI Platform using a wayland distro:
    $ DISTRO=fsl-imx-wayland MACHINE=imx6qsabreauto source fsl-setup-release.sh -b <Your_Build_Directory>

In case you build the Miracast demo for an i.MX6dl SabreAI Platform using a wayland distro:
    $ DISTRO=fsl-imx-wayland MACHINE=imx6dlsabreauto source fsl-setup-release.sh -b <Your_Build_Directory>

step 2:
- Extract and copy the meta-imx-miracast folder to the sources directory and edit the bblayers.conf
in <Your_Build_Directory>/conf directory to add the following line at the end:
    BBLAYERS += " ${BSPDIR}/sources/meta-imx-miracast "

Gstreamer pipelines are used to render decrypted MPEG2-TS stream outputted by the Miracast Stack.
These Gstreamer pipelines are making use of faad (gst-plugins-bad) and dvdlpcmdec (gst-plugins-ugly) plugins.
- Add the "commercial" license support into the local.conf from <Your_Build_Directory>/conf directory by adding the following line at the end:
    LICENSE_FLAGS_WHITELIST = "commercial"

Step 3 (Optional):
**REQUIRED IN CASE YOU USE A WFD SINK SOURCES SNAPSHOT**
- Copy the wfd-sink (Miracast) sources "src-wfd-sink_<version>.tar.gz" to your downloads directory.
By default, a downloads directory exist at the same level as sources directory.
This will only exist if a build has been started.
For a clean system, create the downloads directory before copying the packages.
The downloads directory can also be specified by DL_DIR in the <Your_Build_Directory>/conf/local.conf.

- Create the .done file in the downloads directory
After copying "src-wfd-sink_<version>.tar.gz", change to the downloads directory and create the .done files for this package. 
This will mark to Yocto Project that the package has been fetched.
    $ touch src-wfd-sink_<version>.tar.gz.done

- Edit the local.conf in <Your_Build_Directory>/conf directory and add the following line:
    INTERNAL_MIRROR = "http://localhost"

**REQUIRED IN CASE YOU USE A PREBUILT WFD SINK BINARY ARCHIVE**
- Copy the wfd-sink (Miracast) binaries "bin-wfd-sink_<version>.tar.gz" to your downloads directory.
By default, a downloads directory exist at the same level as sources directory.
This will only exist if a build has been started.
For a clean system, create the downloads directory before copying the packages.
The downloads directory can also be specified by DL_DIR in the <Your_Build_Directory>/conf/local.conf.

- Create the .done file in the downloads directory
After copying "bin-wfd-sink_<version>.tar.gz", change to the downloads directory and create the .done files for this package.
This will mark to Yocto Project that the package have been fetched.
    $ touch bin-wfd-sink_<version>.tar.gz.done

- Edit the local.conf in <Your_Build_Directory>/conf and add the following line:
    INTERNAL_MIRROR = "http://localhost"

Step 4:
Build the Miracast demo image from WFD sources
    $ bitbake egl-imx-miracast-qt5

Build the Miracast demo image from WFD binaries
    $ bitbake egl-imx-miracast-qt5-bin

Deployment
--------------
in case the FrameBuffer backend is used, you will need to edit the /usr/bin/wfd_manager.sh on the target
uncomment the following line to enable eglfs (FB) platform
    XDG_RUNTIME_DIR=/run/user/root wfd_manager_qt -platform eglfs &
and then comment the following line used for a wayland platform
    XDG_RUNTIME_DIR=/run/user/root wfd_manager_qt -platform wayland &

**FOLLOWING REQUIRED IN CASE YOU USE A MURATA ZP BCM4339 SDIO MODULE**
The default sdcard image generated is compatible with the Atheros 9k chipset as the one recommended for the demo.
In case you want to use the 802.11ac Murata ZP BCM4339 SDIO module with the SabreSD Platform, the following steps are required
- From a u-boot prompt, modify the fdt_file environment variable to:
    # setenv fdt_file imx6q-sabresd-btwifi.dtb

- Boot the i.MX6 SabreSD Platform and then modify the /etc/init.d/wfd.sh script as follow:
    #WPA_SUPPLICANT_CONTROL_IFACE=wlan0
    WPA_SUPPLICANT_CONTROL_IFACE=p2p-dev-wlan0


