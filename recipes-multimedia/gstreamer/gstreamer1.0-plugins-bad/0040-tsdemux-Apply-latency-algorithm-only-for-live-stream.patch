From c9e0a3c16db3f3847138c6ff8e729967d008ad30 Mon Sep 17 00:00:00 2001
From: Matthieu Vanin <matthieu.vanin@nxp.com>
Date: Wed, 29 Mar 2017 17:26:14 -0400
Subject: [PATCH 5/7] [tsdemux] Apply latency algorithm only for live streams

---
 gst/mpegtsdemux/mpegtsbase.c | 23 +++++++++++++++++++++++
 gst/mpegtsdemux/tsdemux.c    | 30 ++++++++++++++++++------------
 2 files changed, 41 insertions(+), 12 deletions(-)

diff --git a/gst/mpegtsdemux/mpegtsbase.c b/gst/mpegtsdemux/mpegtsbase.c
index 4aee084..8dbbb89 100644
--- a/gst/mpegtsdemux/mpegtsbase.c
+++ b/gst/mpegtsdemux/mpegtsbase.c
@@ -211,6 +211,9 @@ mpegts_base_reset (MpegTSBase * base)
   g_hash_table_foreach_remove (base->programs, (GHRFunc) remove_each_program,
       base);
 
+  base->upstream_live = FALSE;
+  base->queried_latency = FALSE;
+
   if (klass->reset)
     klass->reset (base);
 }
@@ -1126,6 +1129,22 @@ mpegts_base_sink_event (GstPad * pad, GstObject * parent, GstEvent * event)
   return res;
 }
 
+static void
+query_upstream_latency (MpegTSBase * base)
+{
+  GstQuery *query;
+
+  query = gst_query_new_latency ();
+  if (gst_pad_peer_query (base->sinkpad, query)) {
+    gst_query_parse_latency (query, &base->upstream_live, NULL, NULL);
+    GST_WARNING_OBJECT (base, "Upstream is %s",
+        base->upstream_live ? "LIVE" : "NOT LIVE");
+  } else
+    GST_WARNING_OBJECT (base, "Failed to query upstream latency");
+  gst_query_unref (query);
+  base->queried_latency = TRUE;
+}
+
 static GstFlowReturn
 mpegts_base_chain (GstPad * pad, GstObject * parent, GstBuffer * buf)
 {
@@ -1141,6 +1160,10 @@ mpegts_base_chain (GstPad * pad, GstObject * parent, GstBuffer * buf)
 
   packetizer = base->packetizer;
 
+  if (G_UNLIKELY (base->queried_latency == FALSE)) {
+    query_upstream_latency (base);
+  }
+
   if (klass->input_done)
     gst_buffer_ref (buf);
 
diff --git a/gst/mpegtsdemux/tsdemux.c b/gst/mpegtsdemux/tsdemux.c
index 5a8442b..e02d670 100644
--- a/gst/mpegtsdemux/tsdemux.c
+++ b/gst/mpegtsdemux/tsdemux.c
@@ -633,18 +633,21 @@ gst_ts_demux_srcpad_query (GstPad * pad, GstObject * parent, GstQuery * query)
            PTS/DTS. We therefore allow a latency of 700ms for that.
          */
         gst_query_parse_latency (query, &live, &min_lat, &max_lat);
-        if (start_lat_calc == 1 ) {
-          min_lat= curr_level * GST_MSECOND;
-          //printf ("\n Changing the min latency to %"GST_TIME_FORMAT "ABS %"GST_TIME_FORMAT,GST_TIME_ARGS(min_lat),GST_TIME_ARGS(ABS(min_lat)));
-        gst_query_set_latency (query, live, min_lat, max_lat);
-        }
-        else {
-          if (min_lat != -1)
-            min_lat += demux->static_latency * GST_MSECOND;
-          if (max_lat != -1)
-            max_lat += 700 * GST_MSECOND;
-          gst_query_set_latency (query, live, min_lat, max_lat);
+        min_lat += TS_LATENCY;
+        if (GST_CLOCK_TIME_IS_VALID (max_lat))
+          max_lat += TS_LATENCY;
+
+        if(base->upstream_live) {
+          if (start_lat_calc == 1 ) {
+            min_lat= curr_level * GST_MSECOND;
+          } else {
+            if (min_lat != -1)
+              min_lat += demux->static_latency * GST_MSECOND;
+            if (max_lat != -1)
+              max_lat += 700 * GST_MSECOND;
+          }
         }
+        gst_query_set_latency (query, live, min_lat, max_lat);
       }
       break;
     }
@@ -2570,6 +2573,9 @@ gst_ts_demux_push_pending_data (GstTSDemux * demux, TSDemuxStream * stream)
   MpegTSBaseStream *bs = (MpegTSBaseStream *) stream;
   GstBuffer *buffer = NULL;
   GstBufferList *buffer_list = NULL;
+  MpegTSBase *base_mpegts;
+
+  base_mpegts = GST_MPEGTS_BASE (demux);
 
   GST_DEBUG_OBJECT (stream->pad,
       "stream:%p, pid:0x%04x stream_type:%d state:%d", stream, bs->pid,
@@ -2747,7 +2753,7 @@ gst_ts_demux_push_pending_data (GstTSDemux * demux, TSDemuxStream * stream)
 
 /*********************************************/
 
-  if ((latency_change_counter >= demux->max_latency_changes) || (!(demux->dynamic_latency)))
+  if ((!(base_mpegts->upstream_live)) || (latency_change_counter >= demux->max_latency_changes) || (!(demux->dynamic_latency)))
     goto no_latency_adaptation;
 
   GstClockTime base_time=  GST_ELEMENT_CAST (demux)->base_time;
-- 
1.9.1

