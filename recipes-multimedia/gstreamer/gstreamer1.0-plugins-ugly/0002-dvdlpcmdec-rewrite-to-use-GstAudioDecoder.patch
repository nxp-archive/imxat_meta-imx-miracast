From f78f7cd9870ede26104ae75328cb89bfd8834167 Mon Sep 17 00:00:00 2001
From: Michael Olbrich <m.olbrich@pengutronix.de>
Date: Thu, 28 Apr 2016 16:32:53 +0200
Subject: [PATCH 2/7] dvdlpcmdec: rewrite to use GstAudioDecoder

https://bugzilla.gnome.org/show_bug.cgi?id=765807
---
 gst/dvdlpcmdec/gstdvdlpcmdec.c | 513 +++++++++++++++--------------------------
 gst/dvdlpcmdec/gstdvdlpcmdec.h |  15 +-
 2 files changed, 191 insertions(+), 337 deletions(-)

diff --git a/gst/dvdlpcmdec/gstdvdlpcmdec.c b/gst/dvdlpcmdec/gstdvdlpcmdec.c
index aeb6b59..6eded98 100644
--- a/gst/dvdlpcmdec/gstdvdlpcmdec.c
+++ b/gst/dvdlpcmdec/gstdvdlpcmdec.c
@@ -56,65 +56,31 @@ GST_STATIC_PAD_TEMPLATE ("src",
         "channels = (int) [ 1, 8 ]")
     );
 
-/* DvdLpcmDec signals and args */
-enum
-{
-  /* FILL ME */
-  LAST_SIGNAL
-};
-
-enum
-{
-  PROP_0
-      /* FILL ME */
-};
-
-static void gst_dvdlpcmdec_base_init (gpointer g_class);
-static void gst_dvdlpcmdec_class_init (GstDvdLpcmDecClass * klass);
-static void gst_dvdlpcmdec_init (GstDvdLpcmDec * dvdlpcmdec);
-
-static GstFlowReturn gst_dvdlpcmdec_chain_raw (GstPad * pad, GstObject * parent,
+#define gst_dvdlpcmdec_parent_class parent_class
+G_DEFINE_TYPE (GstDvdLpcmDec, gst_dvdlpcmdec, GST_TYPE_AUDIO_DECODER);
+
+static gboolean gst_dvdlpcmdec_set_format (GstAudioDecoder * bdec,
+    GstCaps * caps);
+static GstFlowReturn gst_dvdlpcmdec_parse (GstAudioDecoder * bdec,
+    GstAdapter * adapter, gint * offset, gint * len);
+static GstFlowReturn gst_dvdlpcmdec_handle_frame (GstAudioDecoder * bdec,
     GstBuffer * buffer);
-static GstFlowReturn gst_dvdlpcmdec_chain_dvd (GstPad * pad, GstObject * parent,
+static GstFlowReturn gst_dvdlpcmdec_chain (GstPad * pad, GstObject * parent,
     GstBuffer * buffer);
-static gboolean gst_dvdlpcmdec_setcaps (GstPad * pad, GstCaps * caps);
-static gboolean dvdlpcmdec_sink_event (GstPad * pad, GstObject * parent,
-    GstEvent * event);
-
-static GstStateChangeReturn gst_dvdlpcmdec_change_state (GstElement * element,
-    GstStateChange transition);
-
-static GstElementClass *parent_class = NULL;
 
-GType
-gst_dvdlpcmdec_get_type (void)
-{
-  static GType dvdlpcmdec_type = 0;
-
-  if (!dvdlpcmdec_type) {
-    static const GTypeInfo dvdlpcmdec_info = {
-      sizeof (GstDvdLpcmDecClass),
-      gst_dvdlpcmdec_base_init,
-      NULL,
-      (GClassInitFunc) gst_dvdlpcmdec_class_init,
-      NULL,
-      NULL,
-      sizeof (GstDvdLpcmDec),
-      0,
-      (GInstanceInitFunc) gst_dvdlpcmdec_init,
-    };
-
-    dvdlpcmdec_type =
-        g_type_register_static (GST_TYPE_ELEMENT, "GstDvdLpcmDec",
-        &dvdlpcmdec_info, 0);
-  }
-  return dvdlpcmdec_type;
-}
 
 static void
-gst_dvdlpcmdec_base_init (gpointer g_class)
+gst_dvdlpcmdec_class_init (GstDvdLpcmDecClass * klass)
 {
-  GstElementClass *element_class = GST_ELEMENT_CLASS (g_class);
+  GstElementClass *element_class;
+  GstAudioDecoderClass *gstbase_class;
+
+  element_class = (GstElementClass *) klass;
+  gstbase_class = (GstAudioDecoderClass *) klass;
+
+  gstbase_class->set_format = GST_DEBUG_FUNCPTR (gst_dvdlpcmdec_set_format);
+  gstbase_class->parse = GST_DEBUG_FUNCPTR (gst_dvdlpcmdec_parse);
+  gstbase_class->handle_frame = GST_DEBUG_FUNCPTR (gst_dvdlpcmdec_handle_frame);
 
   gst_element_class_add_static_pad_template (element_class,
       &gst_dvdlpcmdec_sink_template);
@@ -124,18 +90,8 @@ gst_dvdlpcmdec_base_init (gpointer g_class)
       "DVD LPCM Audio decoder", "Codec/Decoder/Audio",
       "Decode DVD LPCM frames into standard PCM audio",
       "Jan Schmidt <jan@noraisin.net>, Michael Smith <msmith@fluendo.com>");
-}
 
-static void
-gst_dvdlpcmdec_class_init (GstDvdLpcmDecClass * klass)
-{
-  GstElementClass *gstelement_class;
-
-  gstelement_class = (GstElementClass *) klass;
-
-  parent_class = g_type_class_peek_parent (klass);
-
-  gstelement_class->change_state = gst_dvdlpcmdec_change_state;
+  GST_DEBUG_CATEGORY_INIT (dvdlpcm_debug, "dvdlpcmdec", 0, "DVD LPCM Decoder");
 }
 
 static void
@@ -145,27 +101,28 @@ gst_dvdlpcm_reset (GstDvdLpcmDec * dvdlpcmdec)
   dvdlpcmdec->dynamic_range = 0;
   dvdlpcmdec->emphasis = FALSE;
   dvdlpcmdec->mute = FALSE;
-  dvdlpcmdec->timestamp = GST_CLOCK_TIME_NONE;
 
   dvdlpcmdec->header = 0;
 
-  gst_segment_init (&dvdlpcmdec->segment, GST_FORMAT_UNDEFINED);
+  dvdlpcmdec->mode = GST_LPCM_UNKNOWN;
 }
 
 static void
 gst_dvdlpcmdec_init (GstDvdLpcmDec * dvdlpcmdec)
 {
-  dvdlpcmdec->sinkpad =
-      gst_pad_new_from_static_template (&gst_dvdlpcmdec_sink_template, "sink");
-  gst_pad_set_event_function (dvdlpcmdec->sinkpad, dvdlpcmdec_sink_event);
-  gst_element_add_pad (GST_ELEMENT (dvdlpcmdec), dvdlpcmdec->sinkpad);
-
-  dvdlpcmdec->srcpad =
-      gst_pad_new_from_static_template (&gst_dvdlpcmdec_src_template, "src");
-  gst_pad_use_fixed_caps (dvdlpcmdec->srcpad);
-  gst_element_add_pad (GST_ELEMENT (dvdlpcmdec), dvdlpcmdec->srcpad);
-
   gst_dvdlpcm_reset (dvdlpcmdec);
+
+  gst_audio_decoder_set_use_default_pad_acceptcaps (GST_AUDIO_DECODER_CAST
+      (dvdlpcmdec), TRUE);
+  GST_PAD_SET_ACCEPT_TEMPLATE (GST_AUDIO_DECODER_SINK_PAD (dvdlpcmdec));
+
+  /* retrieve and intercept base class chain.
+   * Quite HACKish, but that's dvd specs/caps for you,
+   * since one buffer needs to be split into 2 frames */
+  dvdlpcmdec->base_chain =
+      GST_PAD_CHAINFUNC (GST_AUDIO_DECODER_SINK_PAD (dvdlpcmdec));
+  gst_pad_set_chain_function (GST_AUDIO_DECODER_SINK_PAD (dvdlpcmdec),
+      GST_DEBUG_FUNCPTR (gst_dvdlpcmdec_chain));
 }
 
 static const GstAudioChannelPosition channel_positions[][8] = {
@@ -209,31 +166,26 @@ gst_dvdlpcmdec_send_tags (GstDvdLpcmDec * dvdlpcmdec)
   taglist = gst_tag_list_new (GST_TAG_AUDIO_CODEC, "LPCM Audio",
       GST_TAG_BITRATE, bitrate, NULL);
 
-  gst_pad_push_event (dvdlpcmdec->srcpad, gst_event_new_tag (taglist));
+  gst_audio_decoder_merge_tags (GST_AUDIO_DECODER (dvdlpcmdec), taglist,
+      GST_TAG_MERGE_REPLACE);
+  gst_tag_list_unref (taglist);
 }
 
 static gboolean
-gst_dvdlpcmdec_set_outcaps (GstDvdLpcmDec * dvdlpcmdec)
+gst_dvdlpcmdec_set_output_format (GstDvdLpcmDec * dvdlpcmdec)
 {
   gboolean res = TRUE;
-  GstCaps *src_caps;
 
-  /* Build caps to set on the src pad, which we know from the incoming caps */
-  src_caps = gst_audio_info_to_caps (&dvdlpcmdec->info);
-
-  res = gst_pad_set_caps (dvdlpcmdec->srcpad, src_caps);
+  res = gst_audio_decoder_set_output_format (GST_AUDIO_DECODER (dvdlpcmdec),
+      &dvdlpcmdec->info);
   if (res) {
-    GST_DEBUG_OBJECT (dvdlpcmdec, "Successfully set output caps: %"
-        GST_PTR_FORMAT, src_caps);
+    GST_DEBUG_OBJECT (dvdlpcmdec, "Successfully set output format");
 
     gst_dvdlpcmdec_send_tags (dvdlpcmdec);
   } else {
-    GST_DEBUG_OBJECT (dvdlpcmdec, "Failed to set output caps: %"
-        GST_PTR_FORMAT, src_caps);
+    GST_DEBUG_OBJECT (dvdlpcmdec, "Failed to set output format");
   }
 
-  gst_caps_unref (src_caps);
-
   return res;
 }
 
@@ -253,41 +205,42 @@ gst_dvdlpcmdec_update_audio_formats (GstDvdLpcmDec * dec, gint channels,
     guint c;
 
     position = channel_positions[channels - 1];
-    dec->lpcm_layout = position;
     for (c = 0; c < channels; ++c)
       sorted_position[c] = position[c];
     gst_audio_channel_positions_to_valid_order (sorted_position, channels);
     gst_audio_info_set_format (&dec->info, format, rate, channels,
         sorted_position);
+    if (memcmp (position, sorted_position,
+            channels * sizeof (position[0])) != 0)
+      dec->lpcm_layout = position;
+    else
+      dec->lpcm_layout = NULL;
   } else {
     gst_audio_info_set_format (&dec->info, format, rate, channels, NULL);
   }
 }
 
 static gboolean
-gst_dvdlpcmdec_setcaps (GstPad * pad, GstCaps * caps)
+gst_dvdlpcmdec_set_format (GstAudioDecoder * bdec, GstCaps * caps)
 {
+  GstDvdLpcmDec *dvdlpcmdec = GST_DVDLPCMDEC (bdec);
   GstStructure *structure;
   gboolean res = TRUE;
-  GstDvdLpcmDec *dvdlpcmdec;
   GstAudioFormat format;
   gint rate, channels, width;
 
-  g_return_val_if_fail (caps != NULL, FALSE);
-  g_return_val_if_fail (pad != NULL, FALSE);
-
-  dvdlpcmdec = GST_DVDLPCMDEC (gst_pad_get_parent (pad));
+  gst_dvdlpcm_reset (dvdlpcmdec);
 
   structure = gst_caps_get_structure (caps, 0);
 
   /* If we have the DVD structured LPCM (including header) then we wait
    * for incoming data before creating the output pad caps */
   if (gst_structure_has_name (structure, "audio/x-private1-lpcm")) {
-    gst_pad_set_chain_function (dvdlpcmdec->sinkpad, gst_dvdlpcmdec_chain_dvd);
+    dvdlpcmdec->mode = GST_LPCM_DVD;
     goto done;
   }
 
-  gst_pad_set_chain_function (dvdlpcmdec->sinkpad, gst_dvdlpcmdec_chain_raw);
+  dvdlpcmdec->mode = GST_LPCM_RAW;
 
   res &= gst_structure_get_int (structure, "rate", &rate);
   res &= gst_structure_get_int (structure, "channels", &channels);
@@ -318,60 +271,20 @@ gst_dvdlpcmdec_setcaps (GstPad * pad, GstCaps * caps)
 
   dvdlpcmdec->width = width;
 
-  res = gst_dvdlpcmdec_set_outcaps (dvdlpcmdec);
+  res = gst_dvdlpcmdec_set_output_format (dvdlpcmdec);
 
 done:
-  gst_object_unref (dvdlpcmdec);
   return res;
 
   /* ERRORS */
 caps_parse_error:
   {
     GST_DEBUG_OBJECT (dvdlpcmdec, "Couldn't get parameters; missing caps?");
-    gst_object_unref (dvdlpcmdec);
     return FALSE;
   }
 }
 
 static void
-update_timestamps (GstDvdLpcmDec * dvdlpcmdec, GstBuffer * buf, int samples)
-{
-  gboolean take_buf_ts = FALSE;
-  gint rate;
-
-  rate = GST_AUDIO_INFO_RATE (&dvdlpcmdec->info);
-
-  GST_BUFFER_DURATION (buf) = gst_util_uint64_scale (samples, GST_SECOND, rate);
-
-  if (GST_BUFFER_TIMESTAMP_IS_VALID (buf)) {
-    if (GST_CLOCK_TIME_IS_VALID (dvdlpcmdec->timestamp)) {
-      GstClockTimeDiff one_sample = GST_SECOND / rate;
-      GstClockTimeDiff diff = GST_CLOCK_DIFF (GST_BUFFER_TIMESTAMP (buf),
-          dvdlpcmdec->timestamp);
-
-      if (diff > one_sample || diff < -one_sample)
-        take_buf_ts = TRUE;
-    } else {
-      take_buf_ts = TRUE;
-    }
-  } else if (!GST_CLOCK_TIME_IS_VALID (dvdlpcmdec->timestamp)) {
-    dvdlpcmdec->timestamp = 0;
-  }
-
-  if (take_buf_ts) {
-    /* Take buffer timestamp */
-    dvdlpcmdec->timestamp = GST_BUFFER_TIMESTAMP (buf);
-  } else {
-    GST_BUFFER_TIMESTAMP (buf) = dvdlpcmdec->timestamp;
-  }
-
-  dvdlpcmdec->timestamp += GST_BUFFER_DURATION (buf);
-
-  GST_LOG_OBJECT (dvdlpcmdec, "Updated timestamp to %" GST_TIME_FORMAT,
-      GST_TIME_ARGS (GST_BUFFER_TIMESTAMP (buf)));
-}
-
-static void
 parse_header (GstDvdLpcmDec * dec, guint32 header)
 {
   GstAudioFormat format;
@@ -430,73 +343,40 @@ parse_header (GstDvdLpcmDec * dec, guint32 header)
 }
 
 static GstFlowReturn
-gst_dvdlpcmdec_chain_dvd (GstPad * pad, GstObject * parent, GstBuffer * buf)
+gst_dvdlpcmdec_chain (GstPad * pad, GstObject * parent, GstBuffer * buf)
 {
-  GstDvdLpcmDec *dvdlpcmdec;
-  GstMapInfo map;
-  guint8 *data;
+  GstDvdLpcmDec *dvdlpcmdec = GST_DVDLPCMDEC (parent);
+  guint8 data[2];
   gsize size;
   guint first_access;
-  guint32 header;
   GstBuffer *subbuf;
   GstFlowReturn ret = GST_FLOW_OK;
   gint off, len;
-  gint rate, channels;
-
-  dvdlpcmdec = GST_DVDLPCMDEC (parent);
 
-  gst_buffer_map (buf, &map, GST_MAP_READ);
-  data = map.data;
-  size = map.size;
+  if (dvdlpcmdec->mode != GST_LPCM_DVD)
+    return dvdlpcmdec->base_chain (pad, parent, buf);
 
+  size = gst_buffer_get_size (buf);
   if (size < 5)
     goto too_small;
 
-  /* We have a 5 byte header, now.
-   * The first two bytes are a (big endian) 16 bit offset into our buffer.
-   * The buffer timestamp refers to this offset.
-   *
-   * The other three bytes are a (big endian) number in which the header is
-   * encoded.
-   */
+  gst_buffer_extract (buf, 0, data, 2);
   first_access = (data[0] << 8) | data[1];
   if (first_access > size)
     goto invalid_data;
 
-  /* Don't keep the 'frame number' low 5 bits of the first byte */
-  header = ((data[2] & 0xC0) << 16) | (data[3] << 8) | data[4];
-
-  /* see if we have a new header */
-  if (header != dvdlpcmdec->header) {
-    parse_header (dvdlpcmdec, header);
-
-    if (!gst_dvdlpcmdec_set_outcaps (dvdlpcmdec))
-      goto negotiation_failed;
-
-    dvdlpcmdec->header = header;
-  }
-
-  GST_LOG_OBJECT (dvdlpcmdec, "first_access %d, buffer length %" G_GSIZE_FORMAT,
-      first_access, size);
-
-  rate = GST_AUDIO_INFO_RATE (&dvdlpcmdec->info);
-  channels = GST_AUDIO_INFO_CHANNELS (&dvdlpcmdec->info);
-
-  /* After first_access, we have an additional 3 bytes of data we've parsed and
-   * don't want to handle; this is included within the value of first_access.
+  /* After first_access, we have an additional 3 bytes of header data; this
+   * is included within the value of first_access.
    * So a first_access value of between 1 and 3 is just broken, we treat that
    * the same as zero. first_access == 4 means we only need to create a single
    * sub-buffer, greater than that we need to create two. */
 
-  /* skip access unit bytes and info */
-  off = 5;
+  /* skip access unit bytes */
+  off = 2;
 
   if (first_access > 4) {
-    guint samples = 0;
-    GstClockTime ts;
-
     /* length of first buffer */
-    len = first_access - 4;
+    len = first_access - 1;
 
     GST_LOG_OBJECT (dvdlpcmdec, "Creating first sub-buffer off %d, len %d",
         off, len);
@@ -506,36 +386,8 @@ gst_dvdlpcmdec_chain_dvd (GstPad * pad, GstObject * parent, GstBuffer * buf)
       goto bad_first_access;
 
     subbuf = gst_buffer_copy_region (buf, GST_BUFFER_COPY_ALL, off, len);
-
-    /* If we don't have a stored timestamp from the last packet,
-     * (it's straight after a new-segment, but we have one on the
-     * first access buffer, then calculate the timestamp to align
-     * this buffer to just before the first_access buffer */
-    if (!GST_CLOCK_TIME_IS_VALID (dvdlpcmdec->timestamp) &&
-        GST_BUFFER_TIMESTAMP_IS_VALID (buf)) {
-      switch (dvdlpcmdec->width) {
-        case 16:
-          samples = len / channels / 2;
-          break;
-        case 20:
-          samples = (len / channels) * 2 / 5;
-          break;
-        case 24:
-          samples = len / channels / 3;
-          break;
-      }
-    }
-    if (samples != 0) {
-      ts = gst_util_uint64_scale (samples, GST_SECOND, rate);
-      if (ts < GST_BUFFER_TIMESTAMP (buf))
-        GST_BUFFER_TIMESTAMP (subbuf) = GST_BUFFER_TIMESTAMP (buf) - ts;
-      else
-        GST_BUFFER_TIMESTAMP (subbuf) = 0;
-    } else {
-      GST_BUFFER_TIMESTAMP (subbuf) = GST_CLOCK_TIME_NONE;
-    }
-
-    ret = gst_dvdlpcmdec_chain_raw (pad, parent, subbuf);
+    GST_BUFFER_TIMESTAMP (subbuf) = GST_CLOCK_TIME_NONE;
+    ret = dvdlpcmdec->base_chain (pad, parent, subbuf);
     if (ret != GST_FLOW_OK)
       goto done;
 
@@ -547,10 +399,14 @@ gst_dvdlpcmdec_chain_dvd (GstPad * pad, GstObject * parent, GstBuffer * buf)
         len);
 
     if (len > 0) {
+      GstMemory *header, *tmp;
       subbuf = gst_buffer_copy_region (buf, GST_BUFFER_COPY_ALL, off, len);
+      tmp = gst_buffer_peek_memory (buf, 0);
+      header = gst_memory_copy (tmp, 2, 3);
+      gst_buffer_prepend_memory (subbuf, header);
       GST_BUFFER_TIMESTAMP (subbuf) = GST_BUFFER_TIMESTAMP (buf);
 
-      ret = gst_dvdlpcmdec_chain_raw (pad, parent, subbuf);
+      ret = dvdlpcmdec->base_chain (pad, parent, subbuf);
     }
   } else {
     GST_LOG_OBJECT (dvdlpcmdec,
@@ -558,11 +414,10 @@ gst_dvdlpcmdec_chain_dvd (GstPad * pad, GstObject * parent, GstBuffer * buf)
         size - off);
     subbuf = gst_buffer_copy_region (buf, GST_BUFFER_COPY_ALL, off, size - off);
     GST_BUFFER_TIMESTAMP (subbuf) = GST_BUFFER_TIMESTAMP (buf);
-    ret = gst_dvdlpcmdec_chain_raw (pad, parent, subbuf);
+    ret = dvdlpcmdec->base_chain (pad, parent, subbuf);
   }
 
 done:
-  gst_buffer_unmap (buf, &map);
   gst_buffer_unref (buf);
 
   return ret;
@@ -585,13 +440,6 @@ invalid_data:
     ret = GST_FLOW_OK;
     goto done;
   }
-negotiation_failed:
-  {
-    GST_ELEMENT_ERROR (dvdlpcmdec, STREAM, FORMAT, (NULL),
-        ("Failed to configure output format"));
-    ret = GST_FLOW_NOT_NEGOTIATED;
-    goto done;
-  }
 bad_first_access:
   {
     GST_WARNING_OBJECT (pad, "Bad first_access parameter in buffer");
@@ -604,15 +452,87 @@ bad_first_access:
 }
 
 static GstFlowReturn
-gst_dvdlpcmdec_chain_raw (GstPad * pad, GstObject * parent, GstBuffer * buf)
+gst_dvdlpcmdec_parse_dvd (GstDvdLpcmDec * dvdlpcmdec, GstAdapter * adapter,
+    gint * offset, gint * len)
+{
+  guint32 header;
+  const guint8 *data;
+
+  data = (const guint8 *) gst_adapter_map (adapter, 3);
+  if (!data)
+    goto too_small;
+
+  /* Don't keep the 'frame number' low 5 bits of the first byte */
+  header = ((data[0] & 0xC0) << 16) | (data[1] << 8) | data[2];
+
+  gst_adapter_unmap (adapter);
+
+  /* see if we have a new header */
+  if (header != dvdlpcmdec->header) {
+    parse_header (dvdlpcmdec, header);
+
+    if (!gst_dvdlpcmdec_set_output_format (dvdlpcmdec))
+      goto negotiation_failed;
+
+    dvdlpcmdec->header = header;
+  }
+
+  *offset = 3;
+  *len = gst_adapter_available (adapter) - 3;
+
+  return GST_FLOW_OK;
+
+  /* ERRORS */
+too_small:
+  {
+    /* Buffer is too small */
+    GST_ELEMENT_WARNING (dvdlpcmdec, STREAM, DECODE,
+        ("Invalid data found parsing LPCM packet"),
+        ("LPCM packet was too small. Dropping"));
+    *offset = gst_adapter_available (adapter);
+    return GST_FLOW_EOS;
+  }
+negotiation_failed:
+  {
+    GST_ELEMENT_ERROR (dvdlpcmdec, STREAM, FORMAT, (NULL),
+        ("Failed to configure output format"));
+    return GST_FLOW_NOT_NEGOTIATED;
+  }
+}
+
+static GstFlowReturn
+gst_dvdlpcmdec_parse (GstAudioDecoder * bdec, GstAdapter * adapter,
+    gint * offset, gint * len)
+{
+  GstDvdLpcmDec *dvdlpcmdec = GST_DVDLPCMDEC (bdec);
+
+  switch (dvdlpcmdec->mode) {
+    case GST_LPCM_UNKNOWN:
+      return GST_FLOW_NOT_NEGOTIATED;
+
+    case GST_LPCM_RAW:
+      *offset = 0;
+      *len = gst_adapter_available (adapter);
+      return GST_FLOW_OK;
+
+    case GST_LPCM_DVD:
+      return gst_dvdlpcmdec_parse_dvd (dvdlpcmdec, adapter, offset, len);
+  }
+  return GST_FLOW_ERROR;
+}
+
+static GstFlowReturn
+gst_dvdlpcmdec_handle_frame (GstAudioDecoder * bdec, GstBuffer * buf)
 {
-  GstDvdLpcmDec *dvdlpcmdec;
+  GstDvdLpcmDec *dvdlpcmdec = GST_DVDLPCMDEC (bdec);
   gsize size;
   GstFlowReturn ret;
   guint samples = 0;
   gint rate, channels;
 
-  dvdlpcmdec = GST_DVDLPCMDEC (parent);
+  /* no fancy draining */
+  if (G_UNLIKELY (!buf))
+    return GST_FLOW_OK;
 
   size = gst_buffer_get_size (buf);
 
@@ -626,9 +546,6 @@ gst_dvdlpcmdec_chain_raw (GstPad * pad, GstObject * parent, GstBuffer * buf)
   if (rate == 0)
     goto not_negotiated;
 
-  if (GST_BUFFER_TIMESTAMP_IS_VALID (buf))
-    dvdlpcmdec->timestamp = GST_BUFFER_TIMESTAMP (buf);
-
   /* We don't currently do anything at all regarding emphasis, mute or
    * dynamic_range - I'm not sure what they're for */
   switch (dvdlpcmdec->width) {
@@ -639,7 +556,8 @@ gst_dvdlpcmdec_chain_raw (GstPad * pad, GstObject * parent, GstBuffer * buf)
       samples = size / channels / 2;
       if (samples < 1)
         goto drop;
-      buf = gst_buffer_make_writable (buf);
+
+      gst_buffer_ref (buf);
       break;
     }
     case 20:
@@ -688,7 +606,6 @@ gst_dvdlpcmdec_chain_raw (GstPad * pad, GstObject * parent, GstBuffer * buf)
       }
       gst_buffer_unmap (outbuf, &destmap);
       gst_buffer_unmap (buf, &srcmap);
-      gst_buffer_unref (buf);
       buf = outbuf;
       break;
     }
@@ -698,51 +615,57 @@ gst_dvdlpcmdec_chain_raw (GstPad * pad, GstObject * parent, GstBuffer * buf)
        * and last byte are already correct */
       guint count = size / 12;
       gint i;
-      GstMapInfo map;
-      guint8 *ptr;
+      GstMapInfo srcmap, destmap;
+      guint8 *src, *dest;
+      GstBuffer *outbuf;
 
       samples = size / channels / 3;
 
       if (samples < 1)
         goto drop;
 
-      /* Ensure our output buffer is writable */
-      buf = gst_buffer_make_writable (buf);
+      outbuf = gst_buffer_new_allocate (NULL, size, NULL);
+      gst_buffer_copy_into (outbuf, buf, GST_BUFFER_COPY_TIMESTAMPS, 0, -1);
 
-      gst_buffer_map (buf, &map, GST_MAP_READWRITE);
-      ptr = map.data;
+      gst_buffer_map (buf, &srcmap, GST_MAP_READ);
+      gst_buffer_map (outbuf, &destmap, GST_MAP_READWRITE);
+      src = srcmap.data;
+      dest = destmap.data;
 
       for (i = 0; i < count; i++) {
-        guint8 tmp;
-
-        tmp = ptr[10];
-        ptr[10] = ptr[7];
-        ptr[7] = ptr[5];
-        ptr[5] = ptr[9];
-        ptr[9] = ptr[6];
-        ptr[6] = ptr[4];
-        ptr[4] = ptr[3];
-        ptr[3] = ptr[2];
-        ptr[2] = ptr[8];
-        ptr[8] = tmp;
-
-        ptr += 12;
+        dest[0] = src[0];
+        dest[1] = src[1];
+        dest[11] = src[11];
+        dest[10] = src[7];
+        dest[7] = src[5];
+        dest[5] = src[9];
+        dest[9] = src[6];
+        dest[6] = src[4];
+        dest[4] = src[3];
+        dest[3] = src[2];
+        dest[2] = src[8];
+        dest[8] = src[10];
+
+        src += 12;
+        dest += 12;
       }
-      gst_buffer_unmap (buf, &map);
+      gst_buffer_unmap (outbuf, &destmap);
+      gst_buffer_unmap (buf, &srcmap);
+      buf = outbuf;
       break;
     }
     default:
       goto invalid_width;
   }
 
-  update_timestamps (dvdlpcmdec, buf, samples);
-
-  if (dvdlpcmdec->lpcm_layout)
+  if (dvdlpcmdec->lpcm_layout) {
+    buf = gst_buffer_make_writable (buf);
     gst_audio_buffer_reorder_channels (buf, dvdlpcmdec->info.finfo->format,
         dvdlpcmdec->info.channels, dvdlpcmdec->lpcm_layout,
         dvdlpcmdec->info.position);
+  }
 
-  ret = gst_pad_push (dvdlpcmdec->srcpad, buf);
+  ret = gst_audio_decoder_finish_frame (bdec, buf, 1);
 
 done:
   return ret;
@@ -752,7 +675,6 @@ drop:
   {
     GST_DEBUG_OBJECT (dvdlpcmdec,
         "Buffer of size %" G_GSIZE_FORMAT " is too small. Dropping", size);
-    gst_buffer_unref (buf);
     ret = GST_FLOW_OK;
     goto done;
   }
@@ -760,7 +682,6 @@ not_negotiated:
   {
     GST_ELEMENT_ERROR (dvdlpcmdec, STREAM, FORMAT, (NULL),
         ("Buffer pushed before negotiation"));
-    gst_buffer_unref (buf);
     ret = GST_FLOW_NOT_NEGOTIATED;
     goto done;
   }
@@ -768,88 +689,14 @@ invalid_width:
   {
     GST_ELEMENT_ERROR (dvdlpcmdec, STREAM, WRONG_TYPE, (NULL),
         ("Invalid sample width configured"));
-    gst_buffer_unref (buf);
     ret = GST_FLOW_NOT_NEGOTIATED;
     goto done;
   }
 }
 
 static gboolean
-dvdlpcmdec_sink_event (GstPad * pad, GstObject * parent, GstEvent * event)
-{
-  GstDvdLpcmDec *dvdlpcmdec;
-  gboolean res;
-
-  dvdlpcmdec = GST_DVDLPCMDEC (parent);
-
-  switch (GST_EVENT_TYPE (event)) {
-    case GST_EVENT_CAPS:
-    {
-      GstCaps *caps;
-
-      gst_event_parse_caps (event, &caps);
-      res = gst_dvdlpcmdec_setcaps (pad, caps);
-      gst_event_unref (event);
-      break;
-    }
-    case GST_EVENT_SEGMENT:
-    {
-      GstSegment seg;
-
-      gst_event_copy_segment (event, &seg);
-
-      GST_DEBUG_OBJECT (dvdlpcmdec, "segment %" GST_SEGMENT_FORMAT, &seg);
-
-      dvdlpcmdec->segment = seg;
-
-      if (seg.format == GST_FORMAT_TIME) {
-        dvdlpcmdec->timestamp = GST_CLOCK_TIME_NONE;
-      } else {
-        dvdlpcmdec->timestamp = 0;
-      }
-      res = gst_pad_push_event (dvdlpcmdec->srcpad, event);
-      break;
-    }
-    case GST_EVENT_FLUSH_STOP:
-      gst_segment_init (&dvdlpcmdec->segment, GST_FORMAT_UNDEFINED);
-      res = gst_pad_push_event (dvdlpcmdec->srcpad, event);
-      break;
-    default:
-      res = gst_pad_push_event (dvdlpcmdec->srcpad, event);
-      break;
-  }
-
-  return res;
-}
-
-static GstStateChangeReturn
-gst_dvdlpcmdec_change_state (GstElement * element, GstStateChange transition)
-{
-  GstDvdLpcmDec *dvdlpcmdec = GST_DVDLPCMDEC (element);
-  GstStateChangeReturn res;
-
-  switch (transition) {
-    case GST_STATE_CHANGE_READY_TO_PAUSED:
-      gst_dvdlpcm_reset (dvdlpcmdec);
-      break;
-    default:
-      break;
-  }
-
-  res = parent_class->change_state (element, transition);
-
-  switch (transition) {
-    default:
-      break;
-  }
-
-  return res;
-}
-
-static gboolean
 plugin_init (GstPlugin * plugin)
 {
-  GST_DEBUG_CATEGORY_INIT (dvdlpcm_debug, "dvdlpcmdec", 0, "DVD LPCM Decoder");
 
   if (!gst_element_register (plugin, "dvdlpcmdec", GST_RANK_PRIMARY,
           GST_TYPE_DVDLPCMDEC)) {
diff --git a/gst/dvdlpcmdec/gstdvdlpcmdec.h b/gst/dvdlpcmdec/gstdvdlpcmdec.h
index 955f60c..c0338c9 100644
--- a/gst/dvdlpcmdec/gstdvdlpcmdec.h
+++ b/gst/dvdlpcmdec/gstdvdlpcmdec.h
@@ -23,6 +23,7 @@
 
 #include <gst/gst.h>
 #include <gst/audio/audio.h>
+#include <gst/audio/gstaudiodecoder.h>
 
 G_BEGIN_DECLS
 
@@ -40,11 +41,18 @@ G_BEGIN_DECLS
 typedef struct _GstDvdLpcmDec GstDvdLpcmDec;
 typedef struct _GstDvdLpcmDecClass GstDvdLpcmDecClass;
 
+typedef enum {
+  GST_LPCM_UNKNOWN,
+  GST_LPCM_RAW,
+  GST_LPCM_DVD,
+} GstDvdLpcmMode;
+
 struct _GstDvdLpcmDec {
-  GstElement element;
+  GstAudioDecoder element;
 
-  GstPad *sinkpad,*srcpad;
+  GstPadChainFunction base_chain;
 
+  GstDvdLpcmMode mode;
   guint32 header;
 
   GstAudioInfo info;
@@ -55,11 +63,10 @@ struct _GstDvdLpcmDec {
   gint mute;
 
   GstClockTime timestamp;
-  GstSegment   segment;
 };
 
 struct _GstDvdLpcmDecClass {
-  GstElementClass parent_class;
+  GstAudioDecoderClass parent_class;
 };
 
 GType gst_dvdlpcmdec_get_type (void);
-- 
1.9.1

